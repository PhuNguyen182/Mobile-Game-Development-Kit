using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using MBDK.MobileNotifications.Data;
using MBDK.MobileNotifications.Interfaces;
using UnityEngine;

namespace MBDK.MobileNotifications.Core
{
    /// <summary>
    /// Service x·ª≠ l√Ω business logic c·ªßa notification system
    /// </summary>
    /// <remarks>
    /// Service n√†y x·ª≠ l√Ω c√°c t√°c v·ª• nh∆∞ validate, transform data,
    /// qu·∫£n l√Ω checkpoints v√† t√≠nh to√°n timing cho notifications.
    /// </remarks>
    public class MobileNotificationService : IMobileNotificationService
    {
        private MobileNotificationConfig _config;
        private readonly Dictionary<string, long> _checkpoints;

        /// <summary>
        /// L·∫•y configuration hi·ªán t·∫°i c·ªßa service
        /// </summary>
        /// <value>Configuration ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng</value>
        public MobileNotificationConfig CurrentConfig => this._config;

        /// <summary>
        /// Constructor m·∫∑c ƒë·ªãnh
        /// </summary>
        public MobileNotificationService()
        {
            this._checkpoints = new Dictionary<string, long>();
        }

        /// <summary>
        /// Kh·ªüi t·∫°o notification service v·ªõi configuration
        /// </summary>
        /// <param name="config">Configuration cho service</param>
        public async UniTask InitializeAsync(MobileNotificationConfig config)
        {
            try
            {
                this._config = config;

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚öôÔ∏è [NotificationService] Initializing service...");
                }

                // Load saved checkpoints n·∫øu c√≥
                this.LoadCheckpoints();

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚úÖ [NotificationService] Service initialized successfully");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationService] Initialization failed: {ex.Message}");
            }

            await UniTask.CompletedTask;
        }

        /// <summary>
        /// Validate notification data tr∆∞·ªõc khi schedule
        /// </summary>
        /// <param name="data">Notification data c·∫ßn validate</param>
        /// <returns>True n·∫øu data h·ª£p l·ªá</returns>
        public bool ValidateNotificationData(NotificationData data)
        {
            if (data == null)
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.LogWarning("‚ö†Ô∏è [NotificationService] Notification data is null");
                }
                return false;
            }

            // Validate basic data
            if (!data.IsValid())
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.LogWarning($"‚ö†Ô∏è [NotificationService] Invalid notification data: {data.title}");
                }
                return false;
            }

            // Validate fire time kh√¥ng qu√° xa trong t∆∞∆°ng lai
            var maxFireTime = 60L * 60L * 24L * 365L; // 1 nƒÉm
            if (data.fireTimeInSeconds > maxFireTime)
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.LogWarning($"‚ö†Ô∏è [NotificationService] Fire time qu√° xa: {data.fireTimeInSeconds}s");
                }
                return false;
            }

            // Validate repeat interval n·∫øu c√≥
            if (data.repeats)
            {
                var minRepeatInterval = 60L; // 1 ph√∫t minimum
                if (data.repeatInterval < minRepeatInterval)
                {
                    if (this._config.enableDebugLogs)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è [NotificationService] Repeat interval qu√° ng·∫Øn: {data.repeatInterval}s");
                    }
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// X·ª≠ l√Ω notification scenario v√† chuy·ªÉn th√†nh danh s√°ch notifications
        /// </summary>
        /// <param name="scenario">Scenario c·∫ßn x·ª≠ l√Ω</param>
        /// <returns>Danh s√°ch notification data t·ª´ scenario</returns>
        public List<NotificationData> ProcessScenario(NotificationScenario scenario)
        {
            var processedNotifications = new List<NotificationData>();

            if (scenario == null || !scenario.IsValid())
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.LogWarning("‚ö†Ô∏è [NotificationService] Invalid scenario");
                }
                return processedNotifications;
            }

            if (this._config.enableDebugLogs)
            {
                Debug.Log($"‚öôÔ∏è [NotificationService] Processing scenario: {scenario.scenarioName}");
            }

            // L·∫•y checkpoint timestamp n·∫øu scenario s·ª≠ d·ª•ng checkpoint
            long checkpointTime = 0;
            if (scenario.useCheckpoint)
            {
                if (this._checkpoints.TryGetValue(scenario.checkpointName, out var timestamp))
                {
                    checkpointTime = timestamp;
                    
                    if (this._config.enableDebugLogs)
                    {
                        Debug.Log($"üìç [NotificationService] Using checkpoint '{scenario.checkpointName}' with timestamp: {checkpointTime}");
                    }
                }
                else
                {
                    // Checkpoint kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i
                    checkpointTime = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
                    
                    if (this._config.enableDebugLogs)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è [NotificationService] Checkpoint '{scenario.checkpointName}' kh√¥ng t·ªìn t·∫°i, d√πng th·ªùi gian hi·ªán t·∫°i");
                    }
                }
            }

            // Process t·ª´ng notification trong scenario
            for (int i = 0; i < scenario.notifications.Count; i++)
            {
                var notification = scenario.notifications[i].Clone();

                // Apply group key t·ª´ scenario n·∫øu c√≥
                if (!string.IsNullOrWhiteSpace(scenario.groupKey))
                {
                    notification.groupKey = scenario.groupKey;
                }

                // T√≠nh to√°n fire time d·ª±a v√†o checkpoint n·∫øu c√≥
                if (scenario.useCheckpoint && checkpointTime > 0)
                {
                    var currentTime = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
                    var timeSinceCheckpoint = currentTime - checkpointTime;
                    var originalFireTime = notification.fireTimeInSeconds;
                    
                    // Adjust fire time: n·∫øu time ƒë√£ qua checkpoint th√¨ trigger ngay
                    notification.fireTimeInSeconds = (long)Mathf.Max(0, originalFireTime - timeSinceCheckpoint);
                    
                    if (this._config.enableDebugLogs)
                    {
                        Debug.Log($"‚è±Ô∏è [NotificationService] Adjusted fire time: {originalFireTime}s ‚Üí {notification.fireTimeInSeconds}s");
                    }
                }

                // Validate processed notification
                if (this.ValidateNotificationData(notification))
                {
                    processedNotifications.Add(notification);
                }
            }

            if (this._config.enableDebugLogs)
            {
                Debug.Log($"‚úÖ [NotificationService] Processed {processedNotifications.Count}/{scenario.notifications.Count} notifications");
            }

            return processedNotifications;
        }

        /// <summary>
        /// T√≠nh to√°n th·ªùi gian trigger cho notification d·ª±a v√†o checkpoint
        /// </summary>
        /// <param name="checkpointName">T√™n checkpoint</param>
        /// <param name="delayInSeconds">Th·ªùi gian delay t·ª´ checkpoint (gi√¢y)</param>
        /// <returns>Th·ªùi gian trigger t√≠nh theo seconds t·ª´ b√¢y gi·ªù</returns>
        public long CalculateTriggerTime(string checkpointName, long delayInSeconds)
        {
            if (string.IsNullOrWhiteSpace(checkpointName))
            {
                // Kh√¥ng c√≥ checkpoint, return delay tr·ª±c ti·∫øp
                return delayInSeconds;
            }

            if (!this._checkpoints.TryGetValue(checkpointName, out var checkpointTime))
            {
                // Checkpoint kh√¥ng t·ªìn t·∫°i, return delay tr·ª±c ti·∫øp
                if (this._config.enableDebugLogs)
                {
                    Debug.LogWarning($"‚ö†Ô∏è [NotificationService] Checkpoint '{checkpointName}' kh√¥ng t·ªìn t·∫°i");
                }
                return delayInSeconds;
            }

            var currentTime = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            var timeSinceCheckpoint = currentTime - checkpointTime;
            var targetTime = delayInSeconds - timeSinceCheckpoint;

            // Ensure kh√¥ng √¢m
            return (long)Mathf.Max(0, targetTime);
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t checkpoint cho vi·ªác t√≠nh to√°n notification timing
        /// </summary>
        /// <param name="checkpointName">T√™n checkpoint</param>
        /// <param name="timestamp">Timestamp c·ªßa checkpoint</param>
        public void UpdateCheckpoint(string checkpointName, long timestamp)
        {
            if (string.IsNullOrWhiteSpace(checkpointName))
            {
                Debug.LogWarning("‚ö†Ô∏è [NotificationService] Checkpoint name cannot be empty");
                return;
            }

            this._checkpoints[checkpointName] = timestamp;

            if (this._config.enableDebugLogs)
            {
                Debug.Log($"üìç [NotificationService] Checkpoint updated: {checkpointName} = {timestamp}");
            }

            // Save checkpoints to PlayerPrefs
            this.SaveCheckpoints();
        }

        /// <summary>
        /// Load checkpoints t·ª´ PlayerPrefs
        /// </summary>
        private void LoadCheckpoints()
        {
            try
            {
                var checkpointsJson = PlayerPrefs.GetString("MobileNotifications_Checkpoints", "{}");
                var checkpointDict = JsonUtility.FromJson<CheckpointData>(checkpointsJson);

                if (checkpointDict != null && checkpointDict.checkpoints != null)
                {
                    this._checkpoints.Clear();
                    
                    for (int i = 0; i < checkpointDict.checkpoints.Count; i++)
                    {
                        var checkpoint = checkpointDict.checkpoints[i];
                        this._checkpoints[checkpoint.name] = checkpoint.timestamp;
                    }

                    if (this._config.enableDebugLogs)
                    {
                        Debug.Log($"üìç [NotificationService] Loaded {this._checkpoints.Count} checkpoints");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationService] Error loading checkpoints: {ex.Message}");
            }
        }

        /// <summary>
        /// Save checkpoints to PlayerPrefs
        /// </summary>
        private void SaveCheckpoints()
        {
            try
            {
                var checkpointData = new CheckpointData
                {
                    checkpoints = new List<CheckpointEntry>()
                };

                foreach (var kvp in this._checkpoints)
                {
                    checkpointData.checkpoints.Add(new CheckpointEntry
                    {
                        name = kvp.Key,
                        timestamp = kvp.Value
                    });
                }

                var json = JsonUtility.ToJson(checkpointData);
                PlayerPrefs.SetString("MobileNotifications_Checkpoints", json);
                PlayerPrefs.Save();

                if (this._config.enableDebugLogs)
                {
                    Debug.Log($"üíæ [NotificationService] Saved {this._checkpoints.Count} checkpoints");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationService] Error saving checkpoints: {ex.Message}");
            }
        }

        /// <summary>
        /// Serializable data structure cho checkpoints
        /// </summary>
        [Serializable]
        private class CheckpointData
        {
            public List<CheckpointEntry> checkpoints;
        }

        /// <summary>
        /// Serializable checkpoint entry
        /// </summary>
        [Serializable]
        private class CheckpointEntry
        {
            public string name;
            public long timestamp;
        }
    }
}

