using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using MBDK.MobileNotifications.Data;
using MBDK.MobileNotifications.Interfaces;
using UnityEngine;

#if UNITY_ANDROID
using Unity.Notifications.Android;
#elif UNITY_IOS
using Unity.Notifications.iOS;
#endif

namespace MBDK.MobileNotifications.Core
{
    /// <summary>
    /// Implementation ƒë·ªÉ schedule v√† qu·∫£n l√Ω notifications
    /// </summary>
    /// <remarks>
    /// Class n√†y x·ª≠ l√Ω vi·ªác schedule, cancel v√† query notifications
    /// tr√™n c·∫£ Android v√† iOS platforms s·ª≠ d·ª•ng Unity Mobile Notifications API.
    /// </remarks>
    public class NotificationScheduler : INotificationScheduler
    {
        private MobileNotificationConfig _config;
        private readonly Dictionary<int, NotificationData> _scheduledNotifications;
        private int _nextNotificationId;
        private bool _isInitialized;

        /// <summary>
        /// Ki·ªÉm tra xem scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        /// </summary>
        /// <value>True n·∫øu ƒë√£ kh·ªüi t·∫°o</value>
        public bool IsInitialized => this._isInitialized;

        /// <summary>
        /// Constructor m·∫∑c ƒë·ªãnh
        /// </summary>
        public NotificationScheduler()
        {
            this._scheduledNotifications = new Dictionary<int, NotificationData>();
            this._nextNotificationId = 1;
            this._isInitialized = false;
        }

        /// <summary>
        /// Kh·ªüi t·∫°o notification scheduler v·ªõi configuration
        /// </summary>
        /// <param name="config">Configuration cho scheduler</param>
        public async UniTask InitializeAsync(MobileNotificationConfig config)
        {
            try
            {
                this._config = config;

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚öôÔ∏è [NotificationScheduler] Initializing...");
                }

                // Initialize platform-specific notification centers
#if UNITY_ANDROID
                await this.InitializeAndroidAsync();
#elif UNITY_IOS
                await this.InitializeIOSAsync();
#endif

                this._isInitialized = true;

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚úÖ [NotificationScheduler] Initialized successfully");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Initialization failed: {ex.Message}");
                this._isInitialized = false;
            }

            await UniTask.CompletedTask;
        }

        /// <summary>
        /// Schedule m·ªôt notification single
        /// </summary>
        /// <param name="notificationData">Data c·ªßa notification</param>
        /// <returns>ID c·ªßa notification ƒë√£ schedule</returns>
        public async UniTask<int> ScheduleAsync(NotificationData notificationData)
        {
            if (!this._isInitialized)
            {
                Debug.LogError("‚ùå [NotificationScheduler] Scheduler ch∆∞a ƒë∆∞·ª£c initialized!");
                return -1;
            }

            if (notificationData == null || !notificationData.IsValid())
            {
                Debug.LogError("‚ùå [NotificationScheduler] Invalid notification data!");
                return -1;
            }

            try
            {
                // Assign ID n·∫øu ch∆∞a c√≥
                if (notificationData.identifier == 0)
                {
                    notificationData.identifier = this._nextNotificationId++;
                }

                if (this._config.enableDebugLogs)
                {
                    Debug.Log($"üìÖ [NotificationScheduler] Scheduling notification #{notificationData.identifier}: {notificationData.title}");
                }

#if UNITY_ANDROID
                await this.ScheduleAndroidNotificationAsync(notificationData);
#elif UNITY_IOS
                await this.ScheduleIOSNotificationAsync(notificationData);
#else
                Debug.LogWarning("‚ö†Ô∏è [NotificationScheduler] Platform kh√¥ng h·ªó tr·ª£ notifications");
                return -1;
#endif

                // Store notification data
                this._scheduledNotifications[notificationData.identifier] = notificationData;

                if (this._config.enableDebugLogs)
                {
                    Debug.Log($"‚úÖ [NotificationScheduler] Notification #{notificationData.identifier} scheduled successfully");
                }

                return notificationData.identifier;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Error scheduling notification: {ex.Message}");
                return -1;
            }
        }

        /// <summary>
        /// Schedule nhi·ªÅu notifications c√πng l√∫c
        /// </summary>
        /// <param name="notifications">Danh s√°ch notifications</param>
        /// <returns>Danh s√°ch IDs ƒë√£ schedule</returns>
        public async UniTask<List<int>> ScheduleMultipleAsync(List<NotificationData> notifications)
        {
            var scheduledIds = new List<int>();

            if (notifications == null || notifications.Count == 0)
            {
                Debug.LogWarning("‚ö†Ô∏è [NotificationScheduler] Empty notification list");
                return scheduledIds;
            }

            if (this._config.enableDebugLogs)
            {
                Debug.Log($"üìÖ [NotificationScheduler] Scheduling {notifications.Count} notifications...");
            }

            for (int i = 0; i < notifications.Count; i++)
            {
                var notificationId = await this.ScheduleAsync(notifications[i]);
                
                if (notificationId > 0)
                {
                    scheduledIds.Add(notificationId);
                }
            }

            if (this._config.enableDebugLogs)
            {
                Debug.Log($"‚úÖ [NotificationScheduler] Scheduled {scheduledIds.Count}/{notifications.Count} notifications");
            }

            return scheduledIds;
        }

        /// <summary>
        /// H·ªßy m·ªôt notification theo ID
        /// </summary>
        /// <param name="notificationId">ID c·ªßa notification</param>
        public void Cancel(int notificationId)
        {
            if (!this._isInitialized)
            {
                Debug.LogError("‚ùå [NotificationScheduler] Scheduler ch∆∞a ƒë∆∞·ª£c initialized!");
                return;
            }

            try
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.Log($"üóëÔ∏è [NotificationScheduler] Cancelling notification #{notificationId}");
                }

#if UNITY_ANDROID
                AndroidNotificationCenter.CancelScheduledNotification(notificationId);
#elif UNITY_IOS
                iOSNotificationCenter.RemoveScheduledNotification(notificationId.ToString());
#endif

                // Remove from tracking
                this._scheduledNotifications.Remove(notificationId);

                if (this._config.enableDebugLogs)
                {
                    Debug.Log($"‚úÖ [NotificationScheduler] Notification #{notificationId} cancelled");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Error cancelling notification: {ex.Message}");
            }
        }

        /// <summary>
        /// H·ªßy t·∫•t c·∫£ scheduled notifications
        /// </summary>
        public void CancelAll()
        {
            if (!this._isInitialized)
            {
                Debug.LogError("‚ùå [NotificationScheduler] Scheduler ch∆∞a ƒë∆∞·ª£c initialized!");
                return;
            }

            try
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.Log("üóëÔ∏è [NotificationScheduler] Cancelling all notifications...");
                }

#if UNITY_ANDROID
                AndroidNotificationCenter.CancelAllScheduledNotifications();
#elif UNITY_IOS
                iOSNotificationCenter.RemoveAllScheduledNotifications();
#endif

                // Clear tracking
                this._scheduledNotifications.Clear();

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚úÖ [NotificationScheduler] All notifications cancelled");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Error cancelling all notifications: {ex.Message}");
            }
        }

        /// <summary>
        /// Clear t·∫•t c·∫£ delivered notifications (trong notification center)
        /// </summary>
        public void ClearDelivered()
        {
            if (!this._isInitialized)
            {
                Debug.LogError("‚ùå [NotificationScheduler] Scheduler ch∆∞a ƒë∆∞·ª£c initialized!");
                return;
            }

            try
            {
                if (this._config.enableDebugLogs)
                {
                    Debug.Log("üßπ [NotificationScheduler] Clearing delivered notifications...");
                }

#if UNITY_ANDROID
                AndroidNotificationCenter.CancelAllDisplayedNotifications();
#elif UNITY_IOS
                iOSNotificationCenter.RemoveAllDeliveredNotifications();
#endif

                if (this._config.enableDebugLogs)
                {
                    Debug.Log("‚úÖ [NotificationScheduler] Delivered notifications cleared");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Error clearing delivered notifications: {ex.Message}");
            }
        }

        /// <summary>
        /// L·∫•y danh s√°ch notifications ƒëang scheduled
        /// </summary>
        /// <returns>Danh s√°ch notification data</returns>
        public List<NotificationData> GetScheduledNotifications()
        {
            var notifications = new List<NotificationData>();

            foreach (var kvp in this._scheduledNotifications)
            {
                notifications.Add(kvp.Value);
            }

            return notifications;
        }

#if UNITY_ANDROID
        /// <summary>
        /// Kh·ªüi t·∫°o Android notification center
        /// </summary>
        private async UniTask InitializeAndroidAsync()
        {
            try
            {
                // T·∫°o default notification channel
                var defaultChannel = new AndroidNotificationChannel
                {
                    Id = this.config.androidDefaultChannelId,
                    Name = this.config.androidDefaultChannelName,
                    Description = this.config.androidDefaultChannelDescription,
                    Importance = Importance.Default
                };

                AndroidNotificationCenter.RegisterNotificationChannel(defaultChannel);

                if (this.config.enableDebugLogs)
                {
                    Debug.Log($"üì± [NotificationScheduler] Android default channel created: {defaultChannel.Id}");
                }

                // Register custom channels
                if (this.config.customChannels != null && this.config.customChannels.Count > 0)
                {
                    for (int i = 0; i < this.config.customChannels.Count; i++)
                    {
                        var channelData = this.config.customChannels[i];
                        
                        var customChannel = new AndroidNotificationChannel
                        {
                            Id = channelData.channelId,
                            Name = channelData.channelName,
                            Description = channelData.description,
                            Importance = (Importance)channelData.importance
                        };

                        AndroidNotificationCenter.RegisterNotificationChannel(customChannel);

                        if (this.config.enableDebugLogs)
                        {
                            Debug.Log($"üì± [NotificationScheduler] Custom channel created: {customChannel.Id}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Android initialization error: {ex.Message}");
            }

            await UniTask.CompletedTask;
        }

        /// <summary>
        /// Schedule notification tr√™n Android
        /// </summary>
        private async UniTask ScheduleAndroidNotificationAsync(NotificationData data)
        {
            try
            {
                var notification = new AndroidNotification
                {
                    Title = data.title,
                    Text = data.body,
                    FireTime = DateTime.Now.AddSeconds(data.fireTimeInSeconds),
                    SmallIcon = string.IsNullOrWhiteSpace(data.smallIcon) ? this.config.androidSmallIcon : data.smallIcon,
                    LargeIcon = string.IsNullOrWhiteSpace(data.largeIcon) ? this.config.androidLargeIcon : data.largeIcon
                };

                // Set group key n·∫øu c√≥
                if (!string.IsNullOrWhiteSpace(data.groupKey))
                {
                    notification.Group = data.groupKey;
                }

                // Set repeat n·∫øu c·∫ßn
                if (data.repeats && data.repeatInterval > 0)
                {
                    notification.RepeatInterval = TimeSpan.FromSeconds(data.repeatInterval);
                }

                // Set custom data
                if (!string.IsNullOrWhiteSpace(data.customData))
                {
                    notification.IntentData = data.customData;
                }

                // Get channel ID
                var channelId = string.IsNullOrWhiteSpace(data.category) 
                    ? this.config.androidDefaultChannelId 
                    : data.category;

                // Schedule notification
                AndroidNotificationCenter.SendNotificationWithExplicitID(
                    notification, 
                    channelId, 
                    data.identifier
                );
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] Android schedule error: {ex.Message}");
            }

            await UniTask.CompletedTask;
        }
#endif

#if UNITY_IOS
        /// <summary>
        /// Kh·ªüi t·∫°o iOS notification center
        /// </summary>
        private async UniTask InitializeIOSAsync()
        {
            try
            {
                // iOS kh√¥ng c·∫ßn setup channels nh∆∞ Android
                // Ch·ªâ c·∫ßn clear old notifications n·∫øu c·∫ßn
                iOSNotificationCenter.RemoveAllDeliveredNotifications();

                if (this.config.enableDebugLogs)
                {
                    Debug.Log("üì± [NotificationScheduler] iOS notification center initialized");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] iOS initialization error: {ex.Message}");
            }

            await UniTask.CompletedTask;
        }

        /// <summary>
        /// Schedule notification tr√™n iOS
        /// </summary>
        private async UniTask ScheduleIOSNotificationAsync(NotificationData data)
        {
            try
            {
                var notification = new iOSNotification
                {
                    Identifier = data.identifier.ToString(),
                    Title = data.title,
                    Body = data.body,
                    Subtitle = data.subtitle,
                    Badge = data.badge > 0 ? data.badge : this.config.defaultBadge,
                    ShowInForeground = true,
                    ForegroundPresentationOption = (PresentationOption.Alert | 
                                                   PresentationOption.Sound | 
                                                   PresentationOption.Badge),
                    CategoryIdentifier = string.IsNullOrWhiteSpace(data.category) 
                        ? this.config.defaultCategory 
                        : data.category
                };

                // Set trigger time
                var timeTrigger = new iOSNotificationTimeIntervalTrigger
                {
                    TimeInterval = TimeSpan.FromSeconds(data.fireTimeInSeconds),
                    Repeats = data.repeats
                };

                notification.Trigger = timeTrigger;

                // Set custom data
                if (!string.IsNullOrWhiteSpace(data.customData))
                {
                    notification.Data = data.customData;
                }

                // Schedule notification
                iOSNotificationCenter.ScheduleNotification(notification);
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå [NotificationScheduler] iOS schedule error: {ex.Message}");
            }

            await UniTask.CompletedTask;
        }
#endif
    }
}

